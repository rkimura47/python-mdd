# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_mdd.ipynb.

# %% auto 0
__all__ = ['MDDNode', 'MDDArc']

# %% ../nbs/00_mdd.ipynb 3
from collections.abc import Hashable
import dataclasses

# %% ../nbs/00_mdd.ipynb 4
@dataclasses.dataclass(frozen=True)
class MDDNode:
    """
    MDDNode represents a single node in the MDD.

    An MDDNode is uniquely identified by its layer and state.  The (node) state must be a hashable object.

    Parameters
    ----------
    layer : int
        layer the node is in
    state : Hashable
        state associated with node

    """
    layer: int
    state: Hashable

    def __str__(self) -> str:
        return f"N_{self.layer}({self.state})"

# %% ../nbs/00_mdd.ipynb 7
@dataclasses.dataclass()
class MDDArc:
    """
    MDDArc represents a single arc in the MDD.

    MDDArc represents a single arc in the MDD.  An MDDArc is uniquely
    identified by its head/tail nodes, label, and weight.

    Parameters
    ----------
    label : Hashable
        label of arc (e.g., assigned value)
    weight : float
        weight of arc (e.g., coefficient)
    tail : MDDNode
        tail/source node
    head : MDDNode
        head/destination node

    """
    label: Hashable
    weight: float
    tail: MDDNode
    head: MDDNode

    def __str__(self) -> str:
        return f"A({self.label},{self.weight}:{self.tail},{self.head})"
